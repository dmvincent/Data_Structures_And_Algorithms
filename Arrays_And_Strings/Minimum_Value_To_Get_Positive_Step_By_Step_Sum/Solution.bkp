#include <iostream>
#include <vector>

class Solution {
public:
    int minStartValue(std::vector<int>& nums) {
        // Create prefix array
        std::vector<int> prefix(nums.size());

        // Initiate the start-value
        int startValue = 1;

        // Cycle through the rest of 'nums' and populate prefix array
        for(int i = 0; i < nums.size(); i++) {
            // Special case where i = 0
            if(i == 0) {
                prefix[i] = nums[i] + startValue;
            }          
            else {
                
                // Add prefix at i-1 to current prefix
                prefix[i] = nums[i] + prefix[i-1];
            }
            // Check that the current prefix is not in violation of condition
            if (prefix[i] < 1) {
                int diff = 1 - prefix[i];
                startValue += diff;       
                int j = 0;
                while(j <= i) {
                    prefix[j] = prefix[j] + diff;
                    j++;
                }
            }
        }

        return startValue;
    }
};

int main() {

    std::vector<int> nums{-3,2,-3,4,2};
    Solution s1;
    int ans = s1.minStartValue(nums);
    std::cout << "Anser is: " << ans << std::endl;
    return 0;
}
